# mcp-echo-env

This repository provides an MCP server that simply echoes selected environment
variables. It exists to verify that an MCP client propagates workspace context
(`PWD`, `WORKSPACE_SLUG`, and any additional keys you request) into the server
process.

For installation, local development, and distribution details see
[`instructions.md`](instructions.md). The remainder of this README focuses on
how to exercise the server when testing an MCP client or agent.

## Workspace .env files

On startup the server loads environment variables from a `.env` file in the
current working directory (if present) and otherwise derives sensible defaults.
In particular, when `WORKSPACE_SLUG` is not already defined it automatically
falls back to the basename of the workspace directory, and `PWD` defaults to the
current working directory.

Example `.env` placed at the workspace root:

```env
# .env
WORKSPACE_SLUG=my-workspace
PWD=/custom/path/override
```

Values exported in the real environment still take precedence, so you can
override per run via `WORKSPACE_SLUG=demo pnpm start` when needed.

## Available tool

### `env_echo`

Echo environment variables back to the caller.

- **Default behaviour:** returns `PWD` and `WORKSPACE_SLUG`.
- **Arguments:**
  - `keys` (string[]): list of variable names to read. When omitted, the
    defaults are used.
  - `omitNull` (boolean): drop variables that are unset instead of outputting
    `null`.

The tool responds with both a formatted text block and structured JSON:

```json
{
  "tool": "env_echo",
  "variables": {
    "PWD": "/Users/me/projects/demo",
    "WORKSPACE_SLUG": "my-demo-workspace"
  },
  "workspace_slug": "my-demo-workspace",
  "pwd": "/Users/me/projects/demo"
}
```

The `variables` map mirrors exactly what was requested, while the lowercase
aliases (`workspace_slug`, `pwd`) make the commonly inspected values easy to
read.

## MCP client capability check

Use this server as a quick sanity test to confirm that an MCP client or agent
forwards environment variables:

1. Launch `mcp-server-echo-env` from the workspace you want the client to
   inspect. For ad-hoc checks you can run `pnpm dlx mcp-server-echo-env`, or
   `npx mcp-server-echo-env` once the package is published to npm.
2. Connect your MCP client to the running server (see the Codex CLI instructions
   below for one example).
3. Invoke the `env_echo` tool and ensure the reported `PWD` and `WORKSPACE_SLUG`
   values match the workspace where you started the server. A mismatch indicates
   the client is not relaying the expected environment context.

### Example trigger sequence

1. In one terminal, start the server from the target workspace:

   ```bash
   WORKSPACE_SLUG=demo mcp-server-echo-env
   ```

   Leave this running; it prints a single readiness message and then waits for
   requests.

2. In a second terminal, ask Codex CLI (or another MCP client) to call the
   tool. For Codex CLI, run:

   ```bash
   codex 'Call env_echo with the default arguments and show the JSON response.'
   ```

   Ensure you previously registered the server with `codex mcp add`; Codex will
   launch `mcp-server-echo-env`, call the tool, and include the JSON payload in
   its response, confirming the client relayed `PWD` and `WORKSPACE_SLUG`.

3. When finished, stop the server with `Ctrl+C` in the first terminal.

## Codex CLI example

There are two ways to make the server available to Codex CLI.

### Option 1: CLI registration

```bash
codex mcp add mcp-echo-env mcp-server-echo-env
```

Ensure `mcp-server-echo-env` is discoverable on your `$PATH` (see “Distribution /
installation” below). After registering, launch Codex with your desired prompt:

```bash
codex 'Call env_echo with the default arguments and show the JSON response.'
```

Codex will spawn the server automatically, stream the tool output, and include
the JSON payload in its reply. When you are done testing, remove the server
registration with `codex mcp remove mcp-echo-env`. Pair it with other servers
(for example the Jina web search MCP) through additional `codex mcp add` calls.

### Option 2: Manual config entry

Edit `~/.codex/config.toml` and add:

```toml
[mcp_servers.mcp-echo-env]
command = "mcp-server-echo-env"
```

You can then launch Codex with the same `mcp_servers` override shown above, or
make `mcp-echo-env` part of a profile in the TOML file. Add an optional
`[mcp_servers.mcp-echo-env.env]` section only if you want to enforce a global
override; otherwise the server will infer `WORKSPACE_SLUG` from the active
workspace.
